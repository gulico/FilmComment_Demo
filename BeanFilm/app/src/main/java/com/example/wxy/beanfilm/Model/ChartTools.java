package com.example.wxy.beanfilm.Model;

import android.graphics.Color;
import android.util.Log;

import com.example.wxy.beanfilm.Bean.Score;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Column;
import lecho.lib.hellocharts.model.ColumnChartData;
import lecho.lib.hellocharts.model.SubcolumnValue;
import lecho.lib.hellocharts.view.ColumnChartView;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.listener.PieChartOnValueSelectListener;
import lecho.lib.hellocharts.model.PieChartData;
import lecho.lib.hellocharts.model.SliceValue;
import lecho.lib.hellocharts.view.PieChartView;

public class ChartTools {

    public static void setColumnChartViewData(ColumnChartView chart, Score s1,Score s2) {
        String TAG= "ChartTools";
        //底部标题
        List<String> title = new ArrayList<>();
        //颜色值
        List<Integer> color = new ArrayList<>();
        //X、Y轴值list
        List<AxisValue> axisXValues = new ArrayList<>();
        //所有的柱子
        List<Column> columns = new ArrayList<>();
        //单个柱子


        title.add("五星");
        title.add("四星");
        title.add("三星");
        title.add("二星");
        title.add("一星");


        //颜色值
        color.add(Color.parseColor("#FFAD2E"));
        color.add(Color.parseColor("#41bd56"));


        //对每个集合的柱子进行遍历
        for (int i = 0; i < title.size(); i++) {
            //设置X轴的柱子所对应的属性名称(底部文字)
            axisXValues.add(new AxisValue(i).setLabel(title.get(i)));

            //将每个属性得列全部添加到List中
            //添加了5个大柱子Column,单个大柱子里面mPointValues大小为3（自行调整)

            Column column = new Column();
            //是否显示每个柱子的标签
            column.setHasLabels(true);
            //设置每个柱子的Lable是否选中，为false，表示不用选中，一直显示在柱子上
            column.setHasLabelsOnlyForSelected(false);
            //设置Columns添加到Data中
            List<SubcolumnValue> mPointValues = new ArrayList<>();
            //显示几个小柱子 这里为3
            for (int j = 0; j < 2; j++) {
                //值的大小、颜色
                SubcolumnValue subcolumnValue= new SubcolumnValue(((int) (j == 0 ? s1 : s2).getStars()[i]));
                Log.d(TAG, "setChartViewData: "+subcolumnValue);
                mPointValues.add(new SubcolumnValue(((int) (j == 0 ? s1 : s2).getStars()[i]), color.get(j)));
            }
            column.setValues(mPointValues);
            columns.add(column);
        }

        ColumnChartData columnData = new ColumnChartData(columns);


        //底部
        Axis axisBottom = new Axis(axisXValues);
        //是否显示X轴的网格线
        axisBottom.setHasLines(false);
        //分割线颜色
        axisBottom.setLineColor(Color.parseColor("#ff0000"));
        //字体颜色
        axisBottom.setTextColor(Color.parseColor("#666666"));
        //字体大小
        axisBottom.setTextSize(10);
        //底部文字
        axisBottom.setName("单位：%");
        //每个柱子的便签是否倾斜着显示
        axisBottom.setHasTiltedLabels(true);
        //距离各标签之间的距离,包括离Y轴间距 (0-32之间)
        axisBottom.setMaxLabelChars(10);
        //设置是否自动生成轴对象,自动适应表格的范围(设置之后底部标题变成0-5)
        //axisBottom.setAutoGenerated(true);
        axisBottom.setHasSeparationLine(true);
        //设置x轴在底部显示
        columnData.setAxisXTop(axisBottom);

        //左边  属性与上面一致
        Axis axisLeft = new Axis();
        axisLeft.setHasLines(false);
        axisLeft.setName("左边标题");
        axisLeft.setHasTiltedLabels(true);
        axisLeft.setTextColor(Color.parseColor("#666666"));
        //columnData.setAxisYLeft(axisLeft);

        //设置数据标签的字体大小
        //data.setValueLabelTextSize(12);
        //设置数据标签的字体颜色
        //data.setValueLabelsTextColor(Color.WHITE);
        //设置数据背景是否跟随节点颜色
        //data.setValueLabelBackgroundAuto(true);
        //设置是否有数据背景  是否跟随columvalue的颜色变化
        // data.setValueLabelBackgroundEnabled(true);
        //设置坐标点旁边的文字背景(...)
        //data.setValueLabelBackgroundColor(Color.YELLOW);
        //axisBottom.setMaxLabelChars(5);
        //设置组与组之间的间隔比率,取值范围0-1,1表示组与组之间不留任何间隔
        columnData.setFillRatio(0.7f);
        chart.setInteractive(false);
        //最后将所有值显示在View中
        chart.setColumnChartData(columnData);
    }

    public  static void setPieChartData(PieChartView pieChart,Score s1,Score s2) {

        List<SliceValue> values = new ArrayList<>();
        //颜色list
        final List<Integer> colorData = new ArrayList<>();
        //标签信息
        final List<String> titleData = new ArrayList<>();
        //10种颜色
        colorData.add(Color.parseColor("#FFAD2E"));
        colorData.add(Color.parseColor("#41bd56"));
        //10中标签
        titleData.add("华为 Mate 10");
        titleData.add("荣耀6X");

        //10种模块，数据100随机数
        for (int i = 0; i < colorData.size(); i++) {
            //注意数据list大一定要对应颜色值大小否者越界
            SliceValue sliceValue = new SliceValue((i==0?s1:s2).getNum(), colorData.get(i));
            values.add(sliceValue);
        }

        final PieChartData pieChardata = new PieChartData();
        //显示标签信息
        pieChardata.setHasLabels(true);
        //true：只有点击对应的模块才显示标签信息  false：全部展示出来
        pieChardata.setHasLabelsOnlyForSelected(false);
        //true：占的百分比否显示在饼图外面 false：显示在模块的中间
        pieChardata.setHasLabelsOutside(true);
        //true：环形显示 false：圆形显示
        pieChardata.setHasCenterCircle(true);
        //设置每个模板之间的间隙
        pieChardata.setSlicesSpacing(5);
        //只有设置样式为圆环才能有效设置文字 （在assets目录下新建fonts目录，把ttf字体文件放到这）
        //Typeface tf = Typeface.createFromAsset(getAssets(), "你的字体资源文件路径");
        //pieChardata.setCenterText1Typeface(tf);
        //填充数据 注意不能放在最后 否则就只显示条
        pieChardata.setValues(values);

        //设置中间环形的颜色 只有setHasCenterCircle(true)为环形时配合使用 这里我的模式为圆形故不用
        pieChardata.setCenterCircleColor(Color.WHITE);
        //设置环形的大小级别 也是配合setHasCenterCircle(true)使用
        pieChardata.setCenterCircleScale(0.3f);

        //将参数设置到控件上
        pieChart.setPieChartData(pieChardata);
        //true：点击选中模块变大  false：只有手指按住模板时才变大，手指离开恢复原状
        pieChart.setValueSelectionEnabled(true);
        pieChart.setAlpha(0.9f);//设置透明度
        //设置饼图大小 值越大图越大 1是与父控件相等（如果设置便签信息在饼图外面建议设置0.9f 否则会出现展示不全）
        pieChart.setCircleFillRatio(0.6f);

        //点击事件 (只有设置样式为圆环才能有效)
        pieChart.setOnValueTouchListener(new PieChartOnValueSelectListener() {
            @Override
            public void onValueSelected(int i, SliceValue sliceValue) {
                /**
                 *字体大小(查看了源码 text1：默认为42 text2：默认16 无论怎么修改字体都不能改变原因未知_(:з」∠)_)
                 * 同时注释Text1参数设置text2也不能显示出来...
                 * 建议另写TextView 赋值上去
                 */
                //设置上面文字显示内容
                //pieChardata.setCenterText1(titleData.get(i));
                //设置颜色
                //pieChardata.setCenterText1Color(colorData.get(i));
                //字体大小（无用）
                //pieChardata.setCenterText1FontSize(42);
                //pieChardata.setCenterText2(String.valueOf(sliceValue.getValue()));
                //pieChardata.setCenterText2Color(colorData.get(i));
                //pieChardata.setCenterText2FontSize(16);
            }

            @Override
            public void onValueDeselected() {
            }
        });
    }
}
